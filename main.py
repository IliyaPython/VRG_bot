#! python.exe
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import json, time, base64, requests, asyncio, threading, random as rdm, os

# –ò–º–ø–æ—Ä—Ç—ã —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
from aiogram import types, Dispatcher, Bot, filters as fil, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.methods import SendMessage
from aiogram.fsm.context import FSMContext
from aiogram import flags

# –ò–º–ø–æ—Ä—Ç —Å–æ–±—Å–≤—Ç–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import GenerModels as Models
from classes import *
import DataBase as db
from bot_commands.DnD_commands import *
from bot_commands import *
import utils


symbols = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"
sym = lambda: rdm.choice(symbols)

key = os.environ["BOT TOKEN"]
conversation_history = {}

bot = Bot(
    token=key, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)  # –ú—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å –∫–ª—é—á–æ–º key, –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∑–¥–µ—Å—å
dsp = Dispatcher()

print(Models.Kandinsky.AUTH_HEADERS)

user_id = ""
last_message = ""
rooms = {}
RP_games = {
    "choiced": "",
    "D&D": {
        "Description": "–§—ç–Ω—Ç–µ–∑–∏, –ü–æ–¥–∑–µ–º–µ–ª—å—è –∏ –¥—Ä–∞–∫–æ–Ω—ã, —Å–∫–∞–∑–æ—á–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –±–æ–∏.",
        "SystemDescription": "–¢—ã - –≤–µ–¥—É—â–∏–π –∏–≥—Ä—ã Dungeons & Dragons. –¢—ã —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ –∏ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –∏—Å—Ç–æ—Ä–∏–∏, –≤—ã–±–∏—Ä–∞–µ—à—å –Ω–µ–æ–±—ã—á–Ω—ã–µ –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å—é–∂–µ—Ç–∞."
        "–û–±—Ä–∞—â–∞–π—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ. –ù–æ –Ω–µ –≥–æ–≤–æ—Ä–∏ –ª–∏—à–Ω–µ–≥–æ, –ø—Ä–æ –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ —Å–ª–∞–∂–µ–Ω–Ω–æ—Å—Ç—å. –ü–∏—à–∏ –Ω–µ –±–æ–ª–µ–µ 70 —Å–ª–æ–≤.",
    },
    "a": 1,
}
history = []
dsp.message.register(get_nickname, F.text, fsm_states[0])
dsp.message.register(get_class, F.text, fsm_states[1])
dsp.message.register(get_race, F.text, fsm_states[2])


# dsp.message.register(get_race, F.text, fsm_states[2], flags={"users": users})
dsp.message.register(send_instruction, fil.Command(commands=["help", "h"]))
@dsp.message(fil.Command(commands=["start", "s"]))
async def bot_message(message):
    global user_id
    user_id = str(message.chat.id)
    await db.manager.add_user(user_id)
    print(user_id)
    DnD = types.InlineKeyboardButton(
        text="üê≤ Drag & Dung ‚öî", callback_data="D&D"
    )
    soon = types.InlineKeyboardButton(text="–°–∫–æ—Ä–æ.", callback_data="soon")
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = types.InlineKeyboardMarkup(inline_keyboard=[[DnD, soon]])
    print("\n", markup, "\n")
    await message.answer(
        text="–Ø –±–æ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä. –ù–æ —Å–æ –º–Ω–æ–π –æ–Ω–∏ —Å—Ç–∞–Ω—É—Ç –≤ —Ä–∞–∑—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤–≤–µ–¥–∏—Ç–µ `/help` –∏–ª–∏ `/h`.\n–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –º–µ–Ω—é –∏–≥—Ä –≤–≤–µ–¥–∏—Ç–µ `/menu`",
        reply_markup=markup,
    )


#    bot.send_message(message.chat.id, "–Ø –±–æ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä. –ù–æ —Å–æ –º–Ω–æ–π –æ–Ω–∏ —Å—Ç–∞–Ω—É—Ç –≤ —Ä–∞–∑—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤–≤–µ–¥–∏—Ç–µ <code>/help</code> –∏–ª–∏ <code>/h</code>.\n–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –º–µ–Ω—é –∏–≥—Ä –≤–≤–µ–¥–∏—Ç–µ <code>/menu</code>", parse_mode='html', reply_markup=markup)
dsp.message.register(exiting, fil.Command(commands=["exit", "ex"]))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∞–ø–¥–µ–π—Ç —Ç–∏–ø–∞ CallbackQuery
# —Å data 'D&D' –∏–ª–∏ "–°–∫–æ—Ä–æ."
@dsp.callback_query(F.data.in_(["D&D", "–°–∫–æ—Ä–æ."]))
async def processing_call(callback: types.CallbackQuery, state: FSMContext):
    print("–Ø —Ç—É—Ç, –Ω–æ –¥—Ä—É–≥–æ–π –±–æ—Å—Å!")
    if callback.data == "D&D":
        print("D&D")
        print(state.__dict__['storage'].__dict__)
        await Character.register(dsp=dsp,
                        user_id=callback.from_user.id,
                        fsm_for_callback=state)
        #? –û–¥–Ω–∞ –∏–∑ –æ—à–∏–±–æ–∫ –≤–æ–∑–Ω–∏–∫–∞–ª–∞ –≤ —Å—Ç—Ä–æ–∫–µ 86, –∏–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –≤ user_id –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ, –≤ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ (register -> get_characters_by_ID ->
        #?   -> if ID in database.keys()), –∞ –∫–ª—é—á–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö = —Å—Ç—Ä–æ–∫–∏. –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Ä–∞–∑ int != str, —Ç–æ –æ–Ω–æ –Ω–µ –Ω–∞–π–¥–µ—Ç —é–∑–µ—Ä–∞
        determine_DnD(callback.from_user.id)
    elif callback.data == "soon":
        print("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await callback.answer()

def determine_DnD(user):
    global history
    history = [
        Models.Master.SystemMessage(content=RP_games["D&D"]["SystemDescription"])
    ]
    # –ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
    from srcs import dnd
    @dsp.message(fil.Command(commands=["menu", "m", "M", "Menu"]))
    async def join_to_menu(message: types.Message):
        print("–£–†–ê–ê")
        global user_id
        user_id = message.chat.id
        markup = await utils.make_inlinekeyboard(["–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ", "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"],
                                           ["joinRoom", "createRoom"])
        await message.answer(  # –í –¥–∞–Ω–Ω–æ–º –º–µ—Ç–æ–¥–µ –Ω–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å ID, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: –º–µ—Ç–æ–¥ .answer()
            # –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä self (= message), –∞ –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é SendMessage(self.chat.id), —á—Ç–æ = message.chat.id
            text="–í—ã –∑–∞—à–ª–∏ –≤ –º–µ–Ω—é. –í—ã –º–æ–∂–µ—Ç–µ <b>—Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É</b> –∏–ª–∏ <b>–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ.</b>",
            reply_markup=markup,
        )
        global last_message
        last_message = message

    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∞–ø–¥–µ–π—Ç —Ç–∏–ø–∞ CallbackQuery
    # —Å data 'D&D' –∏–ª–∏ "–°–∫–æ—Ä–æ."
    @dsp.callback_query(F.data.in_(["joinRoom", "createRoom"]))
    async def processing_callback(callback: types.CallbackQuery):
        print("—è —Ç—É—Ç –±–æ—Å—Å!")
        if callback.data == "joinRoom":
            callback.message.answer(
                text="–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π ID –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–î–æ–±–∞–≤–∏–≤ Code).\n–ù–∞–ø—Ä–∏–º–µ—Ä, Code: yyyyyyy"
            )
        elif callback.data == "createRoom":
            Id = eval(
                ("sym()+ " * 9)[:-2]
            )  # –≠—Ç–æ —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ –≤—ã–∑–æ–≤—É sym() 9 —Ä–∞–∑. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É 'sym()+ g...+ sym() +', –ø–æ—ç—Ç–æ–º—É –±–µ—Ä–µ–º –≤—Å—ë, –∫–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–Ω–∞–∫–∞ ([:-2])
            await create_room(callback.message, Id)

    global processing_call
    # processing_call  # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–ø–æ–ª–∞–¥–æ–∫ –≤ –±—É–¥—É—â–µ–º –∏ —á—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º –æ–Ω–∞ –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∞—Å—å

    async def join_to_room(user_id, Id):
        global rooms
        users = (await db.manager.read_database("users")
                 ).keys()
        all_players = ", ".join(
            list(
                map(
                    lambda x: str(x)[1:-1], [rooms[x]["players"] for x in rooms]
                )
            )
        ).split(", ")
        print(all_players)
        if str(user_id) not in all_players:
            user = users[str(user_id)]
            rooms[Id]["players"].append(user)
        else:  # –ò–Ω–∞—á–µ | =, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–µ
            if rooms[Id]["Status"] == True:  # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å, —Ç–æ
                pass  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
            else:  # –∏–Ω–∞—á–µ | –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
                bot.send_message(
                    chat_id=user_id,
                    text="–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç–µ.",
                    parse_mode="html",
                )
        print("–¢—ã –≤–æ—à–µ–ª –≤ –∫–æ–º–Ω–∞—Ç—É!", Id)

    async def create_room(message: types.Message, Id: str):
        global rooms
        users = (await db.manager.read_database("users")
                 ).keys()
        all_players = ", ".join(
            list(
                map(
                    lambda x: str(x)[1:-1], [rooms[x]["players"] for x in rooms]
                )
            )
        ).split(", ")
        if str(message.chat.id) not in all_players:
            user = [user for user in users if user == str(message.chat.id)][0]  
            # –ó–¥–µ—Å—å, –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ç–∞–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ –ø—Ä–∏—á–∏–Ω–µ: –ø—Ä–∏–º–∏–Ω–∏—Ç—å —Ü–∏–∫–ª for –∏ if –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –º–æ–∂–Ω–æ
            # —Ç–æ–ª—å–∫–æ –∑–∞–∫–ª—é—á–∏–≤ –∏—Ö –≤ []. –û–Ω–∏ —Å–æ–∑–¥–∞–¥—É—Ç —Å–ø–∏—Å–æ–∫ —Å —é–∑–µ—Ä–∞–º–∏.id == this_id, –∞ —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ–≥–æ –æ–¥–∏–Ω, –∑–Ω–∞—á–∏—Ç, –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–ø–∏—Å–∫–µ 1
            await message.answer(text=f"–í–æ—Ç –≤–∞—à ID –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã: `{Id}`")
            rooms[Id] = {
                "players": [user],  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                "owner": user,  # –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã
                "Game": "D&D",  # –í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–≥—Ä–∞
                "Status": False,  # –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã: –Ω–∞—á–∞–ª–∞—Å—å - True, –∏–Ω–∞—á–µ - False
                "Cur Step": "Next",  # –¢–µ–∫—É—â–∏–π —à–∞–≥. –ù—É–∂–µ–Ω "–¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –≤—Å–µ–ª–µ–Ω–Ω–æ–π" –∏ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫–∏ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–º–µ–Ω—Ç—ã.
                "banned": [],  # –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            }
            print("–¢—ã —Å–æ–∑–¥–∞–ª –∫–æ–º–Ω–∞—Ç—É!", rooms)
            print(rooms)
        else:  # –ò–Ω–∞—á–µ | =, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–µ
            if (
                Id in rooms and rooms[Id]["Status"] == True
            ):  # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –∏ id –∫–æ–º–Ω–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (->, –Ω–µ –Ω–æ–≤—ã–π), —Ç–æ
                pass  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
            else:  # –∏–Ω–∞—á–µ | –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
                bot.send_message(
                    chat_id=user_id,
                    text="–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç–µ.",
                    parse_mode="html",
                )

    @dsp.message(fil.Command(commands=["game", "g"]))
    async def start_game(message: types.Message):
        for Id in rooms:
            print("A")
            if (
                str(message.chat.id) == rooms[Id]["owner"] 
            ):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–º–Ω–∞—Ç—ã —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
                # history.append(master.HumanMessage("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ –¥–æ–ª–≥–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ, –∞ —Ç—ã –±—É–¥–µ—à—å –Ω–∞—Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å!"
                #                                   " –í –Ω–∞—á–∞–ª–µ –∫–≤–µ—Å—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –≤–≤–µ–¥–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞–µ–ø–∏—Ç–∏–µ –≤ –±–∞—Ä–µ. –ü—Ä–∏–¥—É–º–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫–∞–º"
                #                                  " –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å –∏–≥—Ä–∞—Ç—å, –±—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–µ–Ω –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è!"))
                if len(rooms[Id]["players"]) > 0:
                    history.append(
                            Models.Master.HumanMessage(
                                "–ß—Ç–æ –º—ã –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ –∏ –∫—É–¥–∞ –∏–¥—Ç–∏? –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —É–≤–ª–µ–∫–∞—é—â–µ–µ. –ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–≤–µ—Å—Ç. –û–±—Ä–∞—â–∞–π—Å—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∫ –∫–æ–º–∞–Ω–¥–µ –Ω–∞ '–≤—ã'. –ù–æ"
                                " –Ω–µ –≥–æ–≤–æ—Ä–∏ –ø—Ä–æ –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É. –¢—ã –¥–æ–ª–∂–µ–Ω –ª–∏—à—å –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å"
                            )
                        )
                    from_bot = Models.Master.chat.invoke(history)
                    await message.answer(from_bot.content)
                    rooms[Id]["Status"] = True
                    for user in rooms[Id]["players"]:
                        # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        for m in history:
                            print(m)
                            # bot.delete_message(user, m.message_id)
                        await bot.send_message(
                            int(user),
                            text="–í—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É! –ù–∞–¥–µ—é—Å—å, –≤—ã –∑–Ω–∞–∫–æ–º—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.",
                        )
                    break
                else:
                    await bot.send_message(
                        message.chat.id,
                        text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã –æ–¥–∏–Ω!",
                    )
                    break

    @dsp.message()
    async def general_chat(message: types.Message):
        users = (await db.manager.read_database("users")
                 )
        user = [user for user in users.keys() if user == str(message.chat.id)][0]
        if message.text.startswith("Code: "):
            print("–£—Ä–∞! –ü–æ–±–µ–¥–∞")
            await join_to_room(user_id=user, Id=message.text[6:])
        from_bot = ""
        for room in rooms:
            room = rooms[room]
            if user in room["players"]:  # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
                if room["Status"] == True:  # –∏ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å,
                    # —Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ
                    if (
                        message.text.startswith("Result:")
                        and user == room["owner"]
                        and room["Cur Step"] == "Result"
                    ):
                        history.append(Models.Master.HumanMessage(message.text))
                        # history.append(master.HumanMessage(content=message.text[8:]))
                        room["Cur Step"] = "Next"
                    elif (
                        message.text.startswith("Next:")
                        and user == room["owner"]
                        and room["Cur Step"] == "Next"
                    ):
                        from_user = message.text.removeprefix("Next:")
                        history.append(Models.Master.HumanMessage(
                            content=from_user  
                        ))
                        print(history)
                        print(f"\n {from_bot} \n")
                        from_bot = Models.Master.chat.invoke(history)
                        history.append(from_bot)
                        room["Cur Step"] = "Result"
                        from_bot = from_bot.content
                        prompt = await utils.generate_prompt_for_image(history=history, prompt="Base")
                        print(prompt)
                        image = await Models.generate_image(Models.Kandinsky, prompt, "temp")
                        await message.answer_photo(photo=image, caption=from_bot)
                for player in room["players"]:
                    if (
                        player != message.chat.id
                    ):  # –¢–∞–∫ –∫–∞–∫ Player - —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Player..., —É –Ω–µ–≥–æ –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ id, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        print(user, " - ", users)
                        message_in_game = (
                            f"_{users[user]["Current Character"].get("nickname")}_   --  "
                            f"*{users[user]["Current Character"].get("HeroClass")[1]}-{users[user]["Current Character"].get("race")[1]}*"
                            f"\n{message.text}"
                        )

                        await bot.send_message(
                            chat_id=player, text=message_in_game
                        )
                        # await bot.send_photo(chat_id=player, photo=photo, caption=from_bot)
                    print(message.message_id)

                print(history)


print("All working")
dsp.run_polling(bot)
