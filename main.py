#! python.exe
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import json, time, base64, requests, asyncio, threading, random as rdm, os
# –ò–º–ø–æ—Ä—Ç—ã —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
from aiogram import (types, 
            Dispatcher, Bot,
            filters as fil, F)
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.methods import SendMessage
from aiogram.fsm.context import FSMContext
from aiogram import flags

# –ò–º–ø–æ—Ä—Ç —Å–æ–±—Å–≤—Ç–µ–Ω–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import GenerModels.GigaChat as master
from GenerModels.API_T2I import *
from classes import *
from bot_commands.DnD_commands.create_character import *
import utils


symbols = "abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ"
sym = lambda: rdm.choice(symbols)
KEYS = os.environ.get("Api keys").split(";")

key = os.environ["BOT TOKEN"]
conversation_history = {}

bot = Bot(token=key, default = DefaultBotProperties(parse_mode = ParseMode.MARKDOWN))  # –ú—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å –∫–ª—é—á–æ–º key, –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∑–¥–µ—Å—å 
dsp = Dispatcher()

api = Text2ImageAPI('https://api-key.fusionbrain.ai/', KEYS[0], KEYS[1])
model_id = api.get_model()
user_id = ""
last_message = ""
rooms = {

}
RP_games = {
    "choiced": "",
    "D&D": {
        "Description": "–§—ç–Ω—Ç–µ–∑–∏, –ü–æ–¥–∑–µ–º–µ–ª—å—è –∏ –¥—Ä–∞–∫–æ–Ω—ã, —Å–∫–∞–∑–æ—á–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –±–æ–∏.",
        "SystemDescription": "–¢—ã - –≤–µ–¥—É—â–∏–π –∏–≥—Ä—ã Dungeons & Dragons. –¢—ã —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –∏—Å—Ç–æ—Ä–∏–∏, –≤—ã–±–∏—Ä–∞–µ—à—å –Ω–µ–æ–±—ã—á–Ω—ã–µ –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å—é–∂–µ—Ç–∞.",
        },
    "a": 1
}
history = []
users = {

}
fsm_states.append(users)
dsp.message.register(get_nickname, F.text, fsm_states[0])
dsp.message.register(get_class, F.text, fsm_states[1])
dsp.message.register(get_race, F.text, fsm_states[2])
# dsp.message.register(get_race, F.text, fsm_states[2], flags={"users": users})
@dsp.message(fil.Command(commands=['start', 's']))
async def bot_message(message):
    global user_id
    user_id = message.chat.id
    users[user_id] = {"characters": []}
    print(user_id)
    DnD = types.InlineKeyboardButton(text='üê≤ Drag & Dung ‚öî', callback_data='D&D')
    soon = types.InlineKeyboardButton(text="–°–∫–æ—Ä–æ.", callback_data="soon")
     # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = types.InlineKeyboardMarkup(inline_keyboard=[[DnD, soon]])
    print("\n", markup, "\n")
    await message.answer(
            text="–Ø –±–æ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä. –ù–æ —Å–æ –º–Ω–æ–π –æ–Ω–∏ —Å—Ç–∞–Ω—É—Ç –≤ —Ä–∞–∑—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤–≤–µ–¥–∏—Ç–µ `/help` –∏–ª–∏ `/h`.\n–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –º–µ–Ω—é –∏–≥—Ä –≤–≤–µ–¥–∏—Ç–µ `/menu`",
            reply_markup=markup
    )
#    bot.send_message(message.chat.id, "–Ø –±–æ—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä. –ù–æ —Å–æ –º–Ω–æ–π –æ–Ω–∏ —Å—Ç–∞–Ω—É—Ç –≤ —Ä–∞–∑—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!\n–ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤–≤–µ–¥–∏—Ç–µ <code>/help</code> –∏–ª–∏ <code>/h</code>.\n–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –º–µ–Ω—é –∏–≥—Ä –≤–≤–µ–¥–∏—Ç–µ <code>/menu</code>", parse_mode='html', reply_markup=markup)

# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∞–ø–¥–µ–π—Ç —Ç–∏–ø–∞ CallbackQuery
# —Å data 'D&D' –∏–ª–∏ "–°–∫–æ—Ä–æ."
@dsp.callback_query(F.data.in_(['D&D', "–°–∫–æ—Ä–æ."]))
async def processing_call(callback: types.CallbackQuery, state: FSMContext):
    print("–Ø —Ç—É—Ç, –Ω–æ –¥—Ä—É–≥–æ–π –±–æ—Å—Å!")
    if callback.data == "D&D":
        id = callback.message.chat.id
        print(state)
        await state.set_state(fsm_states[0])  # –ù–∞–ª–∏—á–∏–µ await –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –±–µ–∑ –Ω–µ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–π–¥–µ—Ç –¥–∞–ª—å—à–µ –∏ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –æ—à–∏–±–∫–∞
        await callback.message.answer("–ö–∞–∫ –∑–≤–∞—Ç—å –≤–∞—Å-—Ç–æ –≤ –∏–≥—Ä–µ?")
        print(callback.message.text)
         # await state.get_state()
         # await state.set_state()
         # await state.get_state()
        print(users)
        determine_DnD(users[id])
    elif callback.data == "soon":
        print("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await callback.answer()
def determine_DnD(user):
    global history
    history = [
                master.SystemMessage(
                    content=RP_games["D&D"]["SystemDescription"]
                )
            ]
    @dsp.message(fil.Command(commands=['menu', 'm']))
    async def join_to_menu(message: types.Message):
        print("–£–†–ê–ê")
        global user_id
        user_id = message.chat.id
        joiningRoom = types.InlineKeyboardButton(text='–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ', callback_data='joinRoom')
        createRoom = types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É", callback_data="createRoom")
        markup = types.InlineKeyboardMarkup(inline_keyboard=[[joiningRoom, createRoom]])
        await message.answer(  # –í –¥–∞–Ω–Ω–æ–º –º–µ—Ç–æ–¥–µ –Ω–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å ID, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: –º–µ—Ç–æ–¥ .answer() 
                         # –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä self (= message), –∞ –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é SendMessage(self.chat.id), —á—Ç–æ = message.chat.id
            text="–í—ã –∑–∞—à–ª–∏ –≤ –º–µ–Ω—é. –í—ã –º–æ–∂–µ—Ç–µ <b>—Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É</b> –∏–ª–∏ <b>–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ.</b>", 
            reply_markup=markup
            )
        global last_message
        last_message = message

     # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∞–ø–¥–µ–π—Ç —Ç–∏–ø–∞ CallbackQuery
     # —Å data 'D&D' –∏–ª–∏ "–°–∫–æ—Ä–æ."
    @dsp.callback_query(F.data.in_(['joinRoom', "createRoom"]))
    async def processing_callback(callback: types.CallbackQuery):
        print("—è —Ç—É—Ç –±–æ—Å—Å!")
        if callback.data == "joinRoom":
            callback.message.answer(
                text='–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π ID –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–î–æ–±–∞–≤–∏–≤ Code).\n–ù–∞–ø—Ä–∏–º–µ—Ä, Code: yyyyyyy'
                )
        elif callback.data == "createRoom":
            Id = eval(("sym()+ " * 9)[:-2])  # –≠—Ç–æ —Ä–∞–≤–Ω–æ–∑–Ω–∞—á–Ω–æ –≤—ã–∑–æ–≤—É sym() 9 —Ä–∞–∑. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É 'sym()+ g...+ sym() +', –ø–æ—ç—Ç–æ–º—É –±–µ—Ä–µ–º –≤—Å—ë, –∫–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–Ω–∞–∫–∞ ([:-2])
            await create_room(callback.message, Id)

    global processing_call
     # processing_call  # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é "–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–ø–æ–ª–∞–¥–æ–∫ –≤ –±—É–¥—É—â–µ–º –∏ —á—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º –æ–Ω–∞ –Ω–µ –≤—ã–∑—ã–≤–∞–ª–∞—Å—å
    
    def join_to_room(user_id, Id):
        global rooms
        all_players = ", ".join(list(map(lambda x: str(x)[1:-1], [rooms[x]["players"] for x in rooms]))).split(", ")
        print(all_players)
        if str(user_id) not in all_players:
            user = [user for user in users if user == user_id][0]  # –ó–¥–µ—Å—å, –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ç–∞–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ –ø—Ä–∏—á–∏–Ω–µ: –ø—Ä–∏–º–∏–Ω–∏—Ç—å —Ü–∏–∫–ª for –∏ if –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –º–æ–∂–Ω–æ 
                         # —Ç–æ–ª—å–∫–æ –∑–∞–∫–ª—é—á–∏–≤ –∏—Ö –≤ []. –û–Ω–∏ —Å–æ–∑–¥–∞–¥—É—Ç —Å–ø–∏—Å–æ–∫ —Å —é–∑–µ—Ä–∞–º–∏.id == this_id, –∞ —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ–≥–æ –æ–¥–∏–Ω, –∑–Ω–∞—á–∏—Ç, –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–ø–∏—Å–∫–µ 1
            rooms[Id]["players"].append(user)
        else:  # –ò–Ω–∞—á–µ | =, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–µ
            if rooms[Id]["Status"] == True:  # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å, —Ç–æ 
                pass  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
            else:  # –∏–Ω–∞—á–µ | –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
                bot.send_message(chat_id=user_id, text='–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç–µ.', parse_mode="html")
        print("–¢—ã –≤–æ—à–µ–ª –≤ –∫–æ–º–Ω–∞—Ç—É!", Id)
    async def create_room(message: types.Message, Id: str):
        global rooms
        all_players = ", ".join(list(map(lambda x: str(x)[1:-1], [rooms[x]["players"] for x in rooms]))).split(", ")
        if str(message.chat.id) not in all_players:
            user = [user for user in users if user == message.chat.id][0]  # –ó–¥–µ—Å—å, –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ç–∞–∫–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ –ø—Ä–∏—á–∏–Ω–µ: –ø—Ä–∏–º–∏–Ω–∏—Ç—å —Ü–∏–∫–ª for –∏ if –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –º–æ–∂–Ω–æ 
                         # —Ç–æ–ª—å–∫–æ –∑–∞–∫–ª—é—á–∏–≤ –∏—Ö –≤ []. –û–Ω–∏ —Å–æ–∑–¥–∞–¥—É—Ç —Å–ø–∏—Å–æ–∫ —Å —é–∑–µ—Ä–∞–º–∏.id == this_id, –∞ —Ç–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ–≥–æ –æ–¥–∏–Ω, –∑–Ω–∞—á–∏—Ç, –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–ø–∏—Å–∫–µ 1
            await message.answer(
                text=f'–í–æ—Ç –≤–∞—à ID –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã: `{Id}`'
                )
            rooms[Id] = {   
                            "players": [user],  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            "owner": user,  # –°–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã
                            "Game": "D&D",  # –í—ã–±—Ä–∞–Ω–Ω–∞—è –∏–≥—Ä–∞
                            "Status": False,  # –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã: –Ω–∞—á–∞–ª–∞—Å—å - True, –∏–Ω–∞—á–µ - False
                            "Cur Step": "Next",  # –¢–µ–∫—É—â–∏–π —à–∞–≥. –ù—É–∂–µ–Ω "–¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –≤—Å–µ–ª–µ–Ω–Ω–æ–π" –∏ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–≥—Ä–æ–∫–∏ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–æ–º–µ–Ω—Ç—ã.
                            "banned": []  # –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        }
            print("–¢—ã —Å–æ–∑–¥–∞–ª –∫–æ–º–Ω–∞—Ç—É!", rooms)
            print(rooms)
        else:  # –ò–Ω–∞—á–µ | =, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–µ
            if Id in rooms and rooms[Id]["Status"] == True:  # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å –∏ id –∫–æ–º–Ω–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (->, –Ω–µ –Ω–æ–≤—ã–π), —Ç–æ 
                pass  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
            else:  # –∏–Ω–∞—á–µ | –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
                bot.send_message(chat_id=user_id, text='–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç–µ.', parse_mode="html")
    @dsp.message(fil.Command(commands=["game", "g"]))
    async def start_game(message: types.Message):
        for Id in rooms:
            if message.chat.id == rooms[Id]["owner"]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–º–Ω–∞—Ç—ã —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
                if len(rooms[Id]["players"]) > 1:
                    rooms[Id]["Status"] = True
                    for user in rooms[Id]["players"]:
                         # –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        for m in history:
                            print(m)
                             # bot.delete_message(user, m.message_id)
                        await bot.send_message(user, text="–í—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É! –ù–∞–¥–µ—é—Å—å, –≤—ã –∑–Ω–∞–∫–æ–º—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.")
                    break
                else:
                    await bot.send_message(message.chat.id, text="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã –æ–¥–∏–Ω!")
                    break
    @dsp.message()
    async def general_chat(message: types.Message):
        user = [user for user in users if user == message.chat.id][0]
        if message.text.startswith("Code: "):
            print("–£—Ä–∞! –ü–æ–±–µ–¥–∞")
            join_to_room(user_id=user, Id=message.text[6:])
        from_bot = ""
        for room in rooms:
            room = rooms[room]
            if user in room["players"]:  # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
                if room["Status"] == True:  # –∏ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å, 
                                             # —Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ
                    if message.text.startswith("Result: ") and user == room["owner"] and room["Cur Step"] == "Result":
                        pass
                         # history.append(master.HumanMessage(content=message.text[8:]))
                        room["Cur Step"] = "Next"
                    elif message.text.startswith("Next: ") \
                                    and user == room["owner"] \
                                    and room["Cur Step"] == "Next":
                        history.append(master.HumanMessage("–ß—Ç–æ –º—ã –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ –∏ –∫—É–¥–∞ –∏–¥—Ç–∏? –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ —É–≤–ª–µ–∫–∞—é—â–µ–µ. –ü—Ä–∏–¥—É–º–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–≤–µ—Å—Ç."))
                        from_bot = history[-1].content
                        room["Cur Step"] = "Result"
                for player in room["players"]:
                    if player != message.chat.id:  # –¢–∞–∫ –∫–∞–∫ Player - —ç—Ç–æ –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Player..., —É –Ω–µ–≥–æ –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ id, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        message_in_game = f'''<i>{users[user[0]].nickname}</i> - {users[user[0]].ClassHero[1]}-{users[user[0]].raceHero[1]}
                                            {message.text}'''
                        await bot.send_message(chat_id=player, text=message_in_game)
                    if from_bot:
                        await bot.send_message(chat_id=player, text=from_bot)
                    print(message.message_id)
                
                history.append(message)
                print(history)
        # if message.text:
        #     user_id = message.from_user.id
        #     user_input = message.text
        #     if user_id not in conversation_history:
        #         conversation_history[user_id] = []

        #     conversation_history[user_id].append({"role": "user", "content": user_input})

        #     chat_history = conversation_history[user_id]
        #     print(chat_history)
        #     try:
        #         response = asyncio.run(g4f.ChatCompletion.create_async(
        #             model=g4f.models.default,
        #             messages=chat_history,
        #             provider=g4f.Provider.GeekGpt,
        #         ))
        #         chat_gpt_response = response
        #     except Exception as e:
        #         print(f"{g4f.Provider.GeekGpt.__name__}:", e)
        #         chat_gpt_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        #     await bot.send_message(message.chat.id, chat_gpt_response)
            # print(message.text)
            # prompt = message.text
            # uuid = api.generate(prompt, model_id)
            # images = api.check_generation(uuid)
            # # –ó–¥–µ—Å—å image_base64 - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
            # image_base64 = images[0] # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à—É —Å—Ç—Ä–æ–∫—É base64 —Å—é–¥–∞
            # # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É base64 –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            # image_data = base64.b64decode(image_base64)
            # with open("info.txt", "w+") as file:
            #     file.write(f"{image_base64} in this {images[len(images)-1]}\n")
            # # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            # with open("image.jpg", "wb") as file:
            #     file.write(image_data)
            #     print("AAA")
            # img = open("image.jpg", 'rb')
            # bot.send_photo(message.chat.id, img)
            # print(img)
		
print("All working")
dsp.run_polling(bot)
